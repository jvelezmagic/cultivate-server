# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CompanyCountAggregate {
  id: Int!
  name: Int!
  description: Int!
  avatarUrl: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type CompanyMinAggregate {
  id: String
  name: String
  description: String
  avatarUrl: String
  createdAt: DateTime
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CompanyMaxAggregate {
  id: String
  name: String
  description: String
  avatarUrl: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CompanyCount {
  members: Int!
  questions: Int!
  interviews: Int!
}

type QuestionCount {
  conversations: Int!
}

type Question {
  id: ID!
  title: String!
  goals: [String!]
  createdAt: DateTime!
  updatedAt: DateTime!
  company: Company!
  conversations(where: ConversationWhereInput, orderBy: [ConversationOrderByWithRelationInput!], cursor: ConversationWhereUniqueInput, take: Int, skip: Int, distinct: [ConversationScalarFieldEnum!]): [Conversation!]
  _count: QuestionCount!
}

input ConversationWhereInput {
  AND: [ConversationWhereInput!]
  OR: [ConversationWhereInput!]
  NOT: [ConversationWhereInput!]
  id: StringFilter
  interviewId: StringFilter
  questionId: StringFilter
  interview: InterviewRelationFilter
  question: QuestionRelationFilter
  messages: MessageListRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input InterviewRelationFilter {
  is: InterviewWhereInput
  isNot: InterviewWhereInput
}

input InterviewWhereInput {
  AND: [InterviewWhereInput!]
  OR: [InterviewWhereInput!]
  NOT: [InterviewWhereInput!]
  id: StringFilter
  candidateId: StringFilter
  companyId: StringFilter
  candidate: UserRelationFilter
  company: CompanyRelationFilter
  conversations: ConversationListRelationFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  email: StringFilter
  password: StringFilter
  avatarUrl: StringNullableFilter
  companyId: StringNullableFilter
  company: CompanyRelationFilter
  interviews: InterviewListRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input CompanyRelationFilter {
  is: CompanyWhereInput
  isNot: CompanyWhereInput
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: StringFilter
  name: StringFilter
  description: StringFilter
  avatarUrl: StringNullableFilter
  members: UserListRelationFilter
  questions: QuestionListRelationFilter
  interviews: InterviewListRelationFilter
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input QuestionListRelationFilter {
  every: QuestionWhereInput
  some: QuestionWhereInput
  none: QuestionWhereInput
}

input QuestionWhereInput {
  AND: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  NOT: [QuestionWhereInput!]
  id: StringFilter
  companyId: StringFilter
  title: StringFilter
  goals: StringNullableListFilter
  company: CompanyRelationFilter
  conversations: ConversationListRelationFilter
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input ConversationListRelationFilter {
  every: ConversationWhereInput
  some: ConversationWhereInput
  none: ConversationWhereInput
}

input InterviewListRelationFilter {
  every: InterviewWhereInput
  some: InterviewWhereInput
  none: InterviewWhereInput
}

input QuestionRelationFilter {
  is: QuestionWhereInput
  isNot: QuestionWhereInput
}

input MessageListRelationFilter {
  every: MessageWhereInput
  some: MessageWhereInput
  none: MessageWhereInput
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
  id: StringFilter
  conversationId: StringFilter
  role: EnumMessageRoleFilter
  content: StringFilter
  conversation: ConversationRelationFilter
}

input EnumMessageRoleFilter {
  equals: MessageRole
  in: [MessageRole!]
  notIn: [MessageRole!]
  not: NestedEnumMessageRoleFilter
}

enum MessageRole {
  user
  assistant
}

input NestedEnumMessageRoleFilter {
  equals: MessageRole
  in: [MessageRole!]
  notIn: [MessageRole!]
  not: NestedEnumMessageRoleFilter
}

input ConversationRelationFilter {
  is: ConversationWhereInput
  isNot: ConversationWhereInput
}

input ConversationOrderByWithRelationInput {
  id: SortOrder
  interviewId: SortOrder
  questionId: SortOrder
  interview: InterviewOrderByWithRelationInput
  question: QuestionOrderByWithRelationInput
  messages: MessageOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input InterviewOrderByWithRelationInput {
  id: SortOrder
  candidateId: SortOrder
  companyId: SortOrder
  candidate: UserOrderByWithRelationInput
  company: CompanyOrderByWithRelationInput
  conversations: ConversationOrderByRelationAggregateInput
}

input UserOrderByWithRelationInput {
  id: SortOrder
  email: SortOrder
  password: SortOrder
  avatarUrl: SortOrder
  companyId: SortOrder
  company: CompanyOrderByWithRelationInput
  interviews: InterviewOrderByRelationAggregateInput
}

input CompanyOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  description: SortOrder
  avatarUrl: SortOrder
  members: UserOrderByRelationAggregateInput
  questions: QuestionOrderByRelationAggregateInput
  interviews: InterviewOrderByRelationAggregateInput
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input QuestionOrderByRelationAggregateInput {
  _count: SortOrder
}

input InterviewOrderByRelationAggregateInput {
  _count: SortOrder
}

input ConversationOrderByRelationAggregateInput {
  _count: SortOrder
}

input QuestionOrderByWithRelationInput {
  id: SortOrder
  companyId: SortOrder
  title: SortOrder
  goals: SortOrder
  company: CompanyOrderByWithRelationInput
  conversations: ConversationOrderByRelationAggregateInput
}

input MessageOrderByRelationAggregateInput {
  _count: SortOrder
}

input ConversationWhereUniqueInput {
  id: String
  interviewId_questionId: ConversationInterviewIdQuestionIdCompoundUniqueInput
}

input ConversationInterviewIdQuestionIdCompoundUniqueInput {
  interviewId: String!
  questionId: String!
}

enum ConversationScalarFieldEnum {
  id
  interviewId
  questionId
  createdAt
  updatedAt
}

type Message {
  id: ID!
  role: MessageRole!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  conversation: Conversation!
}

type ConversationCount {
  messages: Int!
}

type Conversation {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  interview: Interview!
  question: Question!
  messages(where: MessageWhereInput, orderBy: [MessageOrderByWithRelationInput!], cursor: MessageWhereUniqueInput, take: Int, skip: Int, distinct: [MessageScalarFieldEnum!]): [Message!]
  _count: ConversationCount!
}

input MessageOrderByWithRelationInput {
  id: SortOrder
  conversationId: SortOrder
  role: SortOrder
  content: SortOrder
  conversation: ConversationOrderByWithRelationInput
}

input MessageWhereUniqueInput {
  id: String
}

enum MessageScalarFieldEnum {
  id
  conversationId
  role
  content
  createdAt
  updatedAt
}

type InterviewCount {
  conversations: Int!
}

type Interview {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  candidate: User!
  company: Company!
  conversations(where: ConversationWhereInput, orderBy: [ConversationOrderByWithRelationInput!], cursor: ConversationWhereUniqueInput, take: Int, skip: Int, distinct: [ConversationScalarFieldEnum!]): [Conversation!]
  _count: InterviewCount!
}

type UserCount {
  interviews: Int!
}

type User {
  id: ID!
  email: String!
  avatarUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
  company: Company
  interviews(where: InterviewWhereInput, orderBy: [InterviewOrderByWithRelationInput!], cursor: InterviewWhereUniqueInput, take: Int, skip: Int, distinct: [InterviewScalarFieldEnum!]): [Interview!]
  _count: UserCount!
}

input InterviewWhereUniqueInput {
  id: String
  candidateId_companyId: InterviewCandidateIdCompanyIdCompoundUniqueInput
}

input InterviewCandidateIdCompanyIdCompoundUniqueInput {
  candidateId: String!
  companyId: String!
}

enum InterviewScalarFieldEnum {
  id
  candidateId
  companyId
  createdAt
  updatedAt
}

type Company {
  id: ID!
  name: String!
  description: String!
  avatarUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
  members: [User!]
  questions(where: QuestionWhereInput, orderBy: [QuestionOrderByWithRelationInput!], cursor: QuestionWhereUniqueInput, take: Int, skip: Int, distinct: [QuestionScalarFieldEnum!]): [Question!]
  interviews(where: InterviewWhereInput, orderBy: [InterviewOrderByWithRelationInput!], cursor: InterviewWhereUniqueInput, take: Int, skip: Int, distinct: [InterviewScalarFieldEnum!]): [Interview!]
  _count: CompanyCount!
}

input QuestionWhereUniqueInput {
  id: String
}

enum QuestionScalarFieldEnum {
  id
  companyId
  title
  goals
  createdAt
  updatedAt
}

type InterviewCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type InterviewMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
}

type InterviewMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
}

type QuestionCountAggregate {
  id: Int!
  title: Int!
  goals: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type QuestionMinAggregate {
  id: String
  title: String
  createdAt: DateTime
  updatedAt: DateTime
}

type QuestionMaxAggregate {
  id: String
  title: String
  createdAt: DateTime
  updatedAt: DateTime
}

type UserCountAggregate {
  id: Int!
  email: Int!
  avatarUrl: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type UserMinAggregate {
  id: String
  email: String
  avatarUrl: String
  createdAt: DateTime
  updatedAt: DateTime
}

type UserMaxAggregate {
  id: String
  email: String
  avatarUrl: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ConversationCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ConversationMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ConversationMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
}

type MessageCountAggregate {
  id: Int!
  role: Int!
  content: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type MessageMinAggregate {
  id: String
  role: MessageRole
  content: String
  createdAt: DateTime
  updatedAt: DateTime
}

type MessageMaxAggregate {
  id: String
  role: MessageRole
  content: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Query {
  users(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User!]!
  user(where: UserWhereUniqueInput!): User
  companies(where: CompanyWhereInput, orderBy: [CompanyOrderByWithRelationInput!], cursor: CompanyWhereUniqueInput, take: Int, skip: Int, distinct: [CompanyScalarFieldEnum!]): [Company!]!
  company(where: CompanyWhereUniqueInput!): Company
  questions(where: QuestionWhereInput, orderBy: [QuestionOrderByWithRelationInput!], cursor: QuestionWhereUniqueInput, take: Int, skip: Int, distinct: [QuestionScalarFieldEnum!]): [Question!]!
  question(where: QuestionWhereUniqueInput!): Question
  interviews(where: InterviewWhereInput, orderBy: [InterviewOrderByWithRelationInput!], cursor: InterviewWhereUniqueInput, take: Int, skip: Int, distinct: [InterviewScalarFieldEnum!]): [Interview!]!
  interview(where: InterviewWhereUniqueInput!): Interview!
  conversations(where: ConversationWhereInput, orderBy: [ConversationOrderByWithRelationInput!], cursor: ConversationWhereUniqueInput, take: Int, skip: Int, distinct: [ConversationScalarFieldEnum!]): [Conversation!]!
  conversation(where: ConversationWhereUniqueInput!): Conversation
  messages(where: MessageWhereInput, orderBy: [MessageOrderByWithRelationInput!], cursor: MessageWhereUniqueInput, take: Int, skip: Int, distinct: [MessageScalarFieldEnum!]): [Message!]!
  message(where: MessageWhereUniqueInput!): Message
}

input UserWhereUniqueInput {
  id: String
  email: String
}

enum UserScalarFieldEnum {
  id
  email
  password
  avatarUrl
  companyId
  createdAt
  updatedAt
}

input CompanyWhereUniqueInput {
  id: String
}

enum CompanyScalarFieldEnum {
  id
  name
  description
  avatarUrl
  createdAt
  updatedAt
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User!
  createCompany(data: CompanyCreateInput!): Company!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company!
  deleteCompany(where: CompanyWhereUniqueInput!): Company!
  createQuestion(data: QuestionCreateInput!): Question!
  updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question!
  deleteQuestion(where: QuestionWhereUniqueInput!): Question!
  createInterview(data: InterviewCreateInput!): Interview!
  updateInterview(data: InterviewUpdateInput!, where: InterviewWhereUniqueInput!): Interview!
  deleteInterview(where: InterviewWhereUniqueInput!): Interview
  setUpCompleteInterview(candidateId: String!, companyId: String!): Interview!
  chatWithCultivateBot(conversationId: String!, content: String): String
  createConversation(data: ConversationCreateInput!): Conversation!
  updateConversation(data: ConversationUpdateInput!, where: ConversationWhereUniqueInput!): Conversation!
  deleteConversation(where: ConversationWhereUniqueInput!): Conversation!
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message!
}

input UserCreateInput {
  id: String
  email: String!
  password: String!
  avatarUrl: String
  company: CompanyCreateNestedOneWithoutMembersInput
  interviews: InterviewCreateNestedManyWithoutCandidateInput
}

input CompanyCreateNestedOneWithoutMembersInput {
  create: CompanyCreateWithoutMembersInput
  connectOrCreate: CompanyCreateOrConnectWithoutMembersInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutMembersInput {
  id: String
  name: String!
  description: String!
  avatarUrl: String
  questions: QuestionCreateNestedManyWithoutCompanyInput
  interviews: InterviewCreateNestedManyWithoutCompanyInput
}

input QuestionCreateNestedManyWithoutCompanyInput {
  create: [QuestionCreateWithoutCompanyInput!]
  connectOrCreate: [QuestionCreateOrConnectWithoutCompanyInput!]
  createMany: QuestionCreateManyCompanyInputEnvelope
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateWithoutCompanyInput {
  id: String
  title: String!
  goals: QuestionCreategoalsInput
  conversations: ConversationCreateNestedManyWithoutQuestionInput
}

input QuestionCreategoalsInput {
  set: [String!]!
}

input ConversationCreateNestedManyWithoutQuestionInput {
  create: [ConversationCreateWithoutQuestionInput!]
  connectOrCreate: [ConversationCreateOrConnectWithoutQuestionInput!]
  createMany: ConversationCreateManyQuestionInputEnvelope
  connect: [ConversationWhereUniqueInput!]
}

input ConversationCreateWithoutQuestionInput {
  id: String
  interview: InterviewCreateNestedOneWithoutConversationsInput!
  messages: MessageCreateNestedManyWithoutConversationInput
}

input InterviewCreateNestedOneWithoutConversationsInput {
  create: InterviewCreateWithoutConversationsInput
  connectOrCreate: InterviewCreateOrConnectWithoutConversationsInput
  connect: InterviewWhereUniqueInput
}

input InterviewCreateWithoutConversationsInput {
  id: String
  candidate: UserCreateNestedOneWithoutInterviewsInput!
  company: CompanyCreateNestedOneWithoutInterviewsInput!
}

input UserCreateNestedOneWithoutInterviewsInput {
  create: UserCreateWithoutInterviewsInput
  connectOrCreate: UserCreateOrConnectWithoutInterviewsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutInterviewsInput {
  id: String
  email: String!
  password: String!
  avatarUrl: String
  company: CompanyCreateNestedOneWithoutMembersInput
}

input UserCreateOrConnectWithoutInterviewsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutInterviewsInput!
}

input CompanyCreateNestedOneWithoutInterviewsInput {
  create: CompanyCreateWithoutInterviewsInput
  connectOrCreate: CompanyCreateOrConnectWithoutInterviewsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutInterviewsInput {
  id: String
  name: String!
  description: String!
  avatarUrl: String
  members: UserCreateNestedManyWithoutCompanyInput
  questions: QuestionCreateNestedManyWithoutCompanyInput
}

input UserCreateNestedManyWithoutCompanyInput {
  create: [UserCreateWithoutCompanyInput!]
  connectOrCreate: [UserCreateOrConnectWithoutCompanyInput!]
  createMany: UserCreateManyCompanyInputEnvelope
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutCompanyInput {
  id: String
  email: String!
  password: String!
  avatarUrl: String
  interviews: InterviewCreateNestedManyWithoutCandidateInput
}

input InterviewCreateNestedManyWithoutCandidateInput {
  create: [InterviewCreateWithoutCandidateInput!]
  connectOrCreate: [InterviewCreateOrConnectWithoutCandidateInput!]
  createMany: InterviewCreateManyCandidateInputEnvelope
  connect: [InterviewWhereUniqueInput!]
}

input InterviewCreateWithoutCandidateInput {
  id: String
  company: CompanyCreateNestedOneWithoutInterviewsInput!
  conversations: ConversationCreateNestedManyWithoutInterviewInput
}

input ConversationCreateNestedManyWithoutInterviewInput {
  create: [ConversationCreateWithoutInterviewInput!]
  connectOrCreate: [ConversationCreateOrConnectWithoutInterviewInput!]
  createMany: ConversationCreateManyInterviewInputEnvelope
  connect: [ConversationWhereUniqueInput!]
}

input ConversationCreateWithoutInterviewInput {
  id: String
  question: QuestionCreateNestedOneWithoutConversationsInput!
  messages: MessageCreateNestedManyWithoutConversationInput
}

input QuestionCreateNestedOneWithoutConversationsInput {
  create: QuestionCreateWithoutConversationsInput
  connectOrCreate: QuestionCreateOrConnectWithoutConversationsInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateWithoutConversationsInput {
  id: String
  title: String!
  goals: QuestionCreategoalsInput
  company: CompanyCreateNestedOneWithoutQuestionsInput!
}

input CompanyCreateNestedOneWithoutQuestionsInput {
  create: CompanyCreateWithoutQuestionsInput
  connectOrCreate: CompanyCreateOrConnectWithoutQuestionsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutQuestionsInput {
  id: String
  name: String!
  description: String!
  avatarUrl: String
  members: UserCreateNestedManyWithoutCompanyInput
  interviews: InterviewCreateNestedManyWithoutCompanyInput
}

input InterviewCreateNestedManyWithoutCompanyInput {
  create: [InterviewCreateWithoutCompanyInput!]
  connectOrCreate: [InterviewCreateOrConnectWithoutCompanyInput!]
  createMany: InterviewCreateManyCompanyInputEnvelope
  connect: [InterviewWhereUniqueInput!]
}

input InterviewCreateWithoutCompanyInput {
  id: String
  candidate: UserCreateNestedOneWithoutInterviewsInput!
  conversations: ConversationCreateNestedManyWithoutInterviewInput
}

input InterviewCreateOrConnectWithoutCompanyInput {
  where: InterviewWhereUniqueInput!
  create: InterviewCreateWithoutCompanyInput!
}

input InterviewCreateManyCompanyInputEnvelope {
  data: [InterviewCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input InterviewCreateManyCompanyInput {
  id: String
  candidateId: String!
}

input CompanyCreateOrConnectWithoutQuestionsInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutQuestionsInput!
}

input QuestionCreateOrConnectWithoutConversationsInput {
  where: QuestionWhereUniqueInput!
  create: QuestionCreateWithoutConversationsInput!
}

input MessageCreateNestedManyWithoutConversationInput {
  create: [MessageCreateWithoutConversationInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutConversationInput!]
  createMany: MessageCreateManyConversationInputEnvelope
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutConversationInput {
  id: String
  role: MessageRole!
  content: String!
}

input MessageCreateOrConnectWithoutConversationInput {
  where: MessageWhereUniqueInput!
  create: MessageCreateWithoutConversationInput!
}

input MessageCreateManyConversationInputEnvelope {
  data: [MessageCreateManyConversationInput!]!
  skipDuplicates: Boolean
}

input MessageCreateManyConversationInput {
  id: String
  role: MessageRole!
  content: String!
}

input ConversationCreateOrConnectWithoutInterviewInput {
  where: ConversationWhereUniqueInput!
  create: ConversationCreateWithoutInterviewInput!
}

input ConversationCreateManyInterviewInputEnvelope {
  data: [ConversationCreateManyInterviewInput!]!
  skipDuplicates: Boolean
}

input ConversationCreateManyInterviewInput {
  id: String
  questionId: String!
}

input InterviewCreateOrConnectWithoutCandidateInput {
  where: InterviewWhereUniqueInput!
  create: InterviewCreateWithoutCandidateInput!
}

input InterviewCreateManyCandidateInputEnvelope {
  data: [InterviewCreateManyCandidateInput!]!
  skipDuplicates: Boolean
}

input InterviewCreateManyCandidateInput {
  id: String
  companyId: String!
}

input UserCreateOrConnectWithoutCompanyInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutCompanyInput!
}

input UserCreateManyCompanyInputEnvelope {
  data: [UserCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input UserCreateManyCompanyInput {
  id: String
  email: String!
  password: String!
  avatarUrl: String
}

input CompanyCreateOrConnectWithoutInterviewsInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutInterviewsInput!
}

input InterviewCreateOrConnectWithoutConversationsInput {
  where: InterviewWhereUniqueInput!
  create: InterviewCreateWithoutConversationsInput!
}

input ConversationCreateOrConnectWithoutQuestionInput {
  where: ConversationWhereUniqueInput!
  create: ConversationCreateWithoutQuestionInput!
}

input ConversationCreateManyQuestionInputEnvelope {
  data: [ConversationCreateManyQuestionInput!]!
  skipDuplicates: Boolean
}

input ConversationCreateManyQuestionInput {
  id: String
  interviewId: String!
}

input QuestionCreateOrConnectWithoutCompanyInput {
  where: QuestionWhereUniqueInput!
  create: QuestionCreateWithoutCompanyInput!
}

input QuestionCreateManyCompanyInputEnvelope {
  data: [QuestionCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input QuestionCreateManyCompanyInput {
  id: String
  title: String!
  goals: QuestionCreategoalsInput
}

input CompanyCreateOrConnectWithoutMembersInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutMembersInput!
}

input UserUpdateInput {
  id: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  company: CompanyUpdateOneWithoutMembersNestedInput
  interviews: InterviewUpdateManyWithoutCandidateNestedInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input CompanyUpdateOneWithoutMembersNestedInput {
  create: CompanyCreateWithoutMembersInput
  connectOrCreate: CompanyCreateOrConnectWithoutMembersInput
  upsert: CompanyUpsertWithoutMembersInput
  disconnect: Boolean
  delete: Boolean
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateWithoutMembersInput
}

input CompanyUpsertWithoutMembersInput {
  update: CompanyUpdateWithoutMembersInput!
  create: CompanyCreateWithoutMembersInput!
}

input CompanyUpdateWithoutMembersInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  questions: QuestionUpdateManyWithoutCompanyNestedInput
  interviews: InterviewUpdateManyWithoutCompanyNestedInput
}

input QuestionUpdateManyWithoutCompanyNestedInput {
  create: [QuestionCreateWithoutCompanyInput!]
  connectOrCreate: [QuestionCreateOrConnectWithoutCompanyInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutCompanyInput!]
  createMany: QuestionCreateManyCompanyInputEnvelope
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  connect: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [QuestionUpdateManyWithWhereWithoutCompanyInput!]
  deleteMany: [QuestionScalarWhereInput!]
}

input QuestionUpsertWithWhereUniqueWithoutCompanyInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutCompanyInput!
  create: QuestionCreateWithoutCompanyInput!
}

input QuestionUpdateWithoutCompanyInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  goals: QuestionUpdategoalsInput
  conversations: ConversationUpdateManyWithoutQuestionNestedInput
}

input QuestionUpdategoalsInput {
  set: [String!]
  push: [String!]
}

input ConversationUpdateManyWithoutQuestionNestedInput {
  create: [ConversationCreateWithoutQuestionInput!]
  connectOrCreate: [ConversationCreateOrConnectWithoutQuestionInput!]
  upsert: [ConversationUpsertWithWhereUniqueWithoutQuestionInput!]
  createMany: ConversationCreateManyQuestionInputEnvelope
  set: [ConversationWhereUniqueInput!]
  disconnect: [ConversationWhereUniqueInput!]
  delete: [ConversationWhereUniqueInput!]
  connect: [ConversationWhereUniqueInput!]
  update: [ConversationUpdateWithWhereUniqueWithoutQuestionInput!]
  updateMany: [ConversationUpdateManyWithWhereWithoutQuestionInput!]
  deleteMany: [ConversationScalarWhereInput!]
}

input ConversationUpsertWithWhereUniqueWithoutQuestionInput {
  where: ConversationWhereUniqueInput!
  update: ConversationUpdateWithoutQuestionInput!
  create: ConversationCreateWithoutQuestionInput!
}

input ConversationUpdateWithoutQuestionInput {
  id: StringFieldUpdateOperationsInput
  interview: InterviewUpdateOneRequiredWithoutConversationsNestedInput
  messages: MessageUpdateManyWithoutConversationNestedInput
}

input InterviewUpdateOneRequiredWithoutConversationsNestedInput {
  create: InterviewCreateWithoutConversationsInput
  connectOrCreate: InterviewCreateOrConnectWithoutConversationsInput
  upsert: InterviewUpsertWithoutConversationsInput
  connect: InterviewWhereUniqueInput
  update: InterviewUpdateWithoutConversationsInput
}

input InterviewUpsertWithoutConversationsInput {
  update: InterviewUpdateWithoutConversationsInput!
  create: InterviewCreateWithoutConversationsInput!
}

input InterviewUpdateWithoutConversationsInput {
  id: StringFieldUpdateOperationsInput
  candidate: UserUpdateOneRequiredWithoutInterviewsNestedInput
  company: CompanyUpdateOneRequiredWithoutInterviewsNestedInput
}

input UserUpdateOneRequiredWithoutInterviewsNestedInput {
  create: UserCreateWithoutInterviewsInput
  connectOrCreate: UserCreateOrConnectWithoutInterviewsInput
  upsert: UserUpsertWithoutInterviewsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutInterviewsInput
}

input UserUpsertWithoutInterviewsInput {
  update: UserUpdateWithoutInterviewsInput!
  create: UserCreateWithoutInterviewsInput!
}

input UserUpdateWithoutInterviewsInput {
  id: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  company: CompanyUpdateOneWithoutMembersNestedInput
}

input CompanyUpdateOneRequiredWithoutInterviewsNestedInput {
  create: CompanyCreateWithoutInterviewsInput
  connectOrCreate: CompanyCreateOrConnectWithoutInterviewsInput
  upsert: CompanyUpsertWithoutInterviewsInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateWithoutInterviewsInput
}

input CompanyUpsertWithoutInterviewsInput {
  update: CompanyUpdateWithoutInterviewsInput!
  create: CompanyCreateWithoutInterviewsInput!
}

input CompanyUpdateWithoutInterviewsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutCompanyNestedInput
  questions: QuestionUpdateManyWithoutCompanyNestedInput
}

input UserUpdateManyWithoutCompanyNestedInput {
  create: [UserCreateWithoutCompanyInput!]
  connectOrCreate: [UserCreateOrConnectWithoutCompanyInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCompanyInput!]
  createMany: UserCreateManyCompanyInputEnvelope
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [UserUpdateManyWithWhereWithoutCompanyInput!]
  deleteMany: [UserScalarWhereInput!]
}

input UserUpsertWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCompanyInput!
  create: UserCreateWithoutCompanyInput!
}

input UserUpdateWithoutCompanyInput {
  id: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  interviews: InterviewUpdateManyWithoutCandidateNestedInput
}

input InterviewUpdateManyWithoutCandidateNestedInput {
  create: [InterviewCreateWithoutCandidateInput!]
  connectOrCreate: [InterviewCreateOrConnectWithoutCandidateInput!]
  upsert: [InterviewUpsertWithWhereUniqueWithoutCandidateInput!]
  createMany: InterviewCreateManyCandidateInputEnvelope
  set: [InterviewWhereUniqueInput!]
  disconnect: [InterviewWhereUniqueInput!]
  delete: [InterviewWhereUniqueInput!]
  connect: [InterviewWhereUniqueInput!]
  update: [InterviewUpdateWithWhereUniqueWithoutCandidateInput!]
  updateMany: [InterviewUpdateManyWithWhereWithoutCandidateInput!]
  deleteMany: [InterviewScalarWhereInput!]
}

input InterviewUpsertWithWhereUniqueWithoutCandidateInput {
  where: InterviewWhereUniqueInput!
  update: InterviewUpdateWithoutCandidateInput!
  create: InterviewCreateWithoutCandidateInput!
}

input InterviewUpdateWithoutCandidateInput {
  id: StringFieldUpdateOperationsInput
  company: CompanyUpdateOneRequiredWithoutInterviewsNestedInput
  conversations: ConversationUpdateManyWithoutInterviewNestedInput
}

input ConversationUpdateManyWithoutInterviewNestedInput {
  create: [ConversationCreateWithoutInterviewInput!]
  connectOrCreate: [ConversationCreateOrConnectWithoutInterviewInput!]
  upsert: [ConversationUpsertWithWhereUniqueWithoutInterviewInput!]
  createMany: ConversationCreateManyInterviewInputEnvelope
  set: [ConversationWhereUniqueInput!]
  disconnect: [ConversationWhereUniqueInput!]
  delete: [ConversationWhereUniqueInput!]
  connect: [ConversationWhereUniqueInput!]
  update: [ConversationUpdateWithWhereUniqueWithoutInterviewInput!]
  updateMany: [ConversationUpdateManyWithWhereWithoutInterviewInput!]
  deleteMany: [ConversationScalarWhereInput!]
}

input ConversationUpsertWithWhereUniqueWithoutInterviewInput {
  where: ConversationWhereUniqueInput!
  update: ConversationUpdateWithoutInterviewInput!
  create: ConversationCreateWithoutInterviewInput!
}

input ConversationUpdateWithoutInterviewInput {
  id: StringFieldUpdateOperationsInput
  question: QuestionUpdateOneRequiredWithoutConversationsNestedInput
  messages: MessageUpdateManyWithoutConversationNestedInput
}

input QuestionUpdateOneRequiredWithoutConversationsNestedInput {
  create: QuestionCreateWithoutConversationsInput
  connectOrCreate: QuestionCreateOrConnectWithoutConversationsInput
  upsert: QuestionUpsertWithoutConversationsInput
  connect: QuestionWhereUniqueInput
  update: QuestionUpdateWithoutConversationsInput
}

input QuestionUpsertWithoutConversationsInput {
  update: QuestionUpdateWithoutConversationsInput!
  create: QuestionCreateWithoutConversationsInput!
}

input QuestionUpdateWithoutConversationsInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  goals: QuestionUpdategoalsInput
  company: CompanyUpdateOneRequiredWithoutQuestionsNestedInput
}

input CompanyUpdateOneRequiredWithoutQuestionsNestedInput {
  create: CompanyCreateWithoutQuestionsInput
  connectOrCreate: CompanyCreateOrConnectWithoutQuestionsInput
  upsert: CompanyUpsertWithoutQuestionsInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateWithoutQuestionsInput
}

input CompanyUpsertWithoutQuestionsInput {
  update: CompanyUpdateWithoutQuestionsInput!
  create: CompanyCreateWithoutQuestionsInput!
}

input CompanyUpdateWithoutQuestionsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutCompanyNestedInput
  interviews: InterviewUpdateManyWithoutCompanyNestedInput
}

input InterviewUpdateManyWithoutCompanyNestedInput {
  create: [InterviewCreateWithoutCompanyInput!]
  connectOrCreate: [InterviewCreateOrConnectWithoutCompanyInput!]
  upsert: [InterviewUpsertWithWhereUniqueWithoutCompanyInput!]
  createMany: InterviewCreateManyCompanyInputEnvelope
  set: [InterviewWhereUniqueInput!]
  disconnect: [InterviewWhereUniqueInput!]
  delete: [InterviewWhereUniqueInput!]
  connect: [InterviewWhereUniqueInput!]
  update: [InterviewUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [InterviewUpdateManyWithWhereWithoutCompanyInput!]
  deleteMany: [InterviewScalarWhereInput!]
}

input InterviewUpsertWithWhereUniqueWithoutCompanyInput {
  where: InterviewWhereUniqueInput!
  update: InterviewUpdateWithoutCompanyInput!
  create: InterviewCreateWithoutCompanyInput!
}

input InterviewUpdateWithoutCompanyInput {
  id: StringFieldUpdateOperationsInput
  candidate: UserUpdateOneRequiredWithoutInterviewsNestedInput
  conversations: ConversationUpdateManyWithoutInterviewNestedInput
}

input InterviewUpdateWithWhereUniqueWithoutCompanyInput {
  where: InterviewWhereUniqueInput!
  data: InterviewUpdateWithoutCompanyInput!
}

input InterviewUpdateManyWithWhereWithoutCompanyInput {
  where: InterviewScalarWhereInput!
  data: InterviewUpdateManyMutationInput!
}

input InterviewScalarWhereInput {
  AND: [InterviewScalarWhereInput!]
  OR: [InterviewScalarWhereInput!]
  NOT: [InterviewScalarWhereInput!]
  id: StringFilter
  candidateId: StringFilter
  companyId: StringFilter
}

input InterviewUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
}

input MessageUpdateManyWithoutConversationNestedInput {
  create: [MessageCreateWithoutConversationInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutConversationInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutConversationInput!]
  createMany: MessageCreateManyConversationInputEnvelope
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutConversationInput!]
  updateMany: [MessageUpdateManyWithWhereWithoutConversationInput!]
  deleteMany: [MessageScalarWhereInput!]
}

input MessageUpsertWithWhereUniqueWithoutConversationInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutConversationInput!
  create: MessageCreateWithoutConversationInput!
}

input MessageUpdateWithoutConversationInput {
  id: StringFieldUpdateOperationsInput
  role: EnumMessageRoleFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
}

input EnumMessageRoleFieldUpdateOperationsInput {
  set: MessageRole
}

input MessageUpdateWithWhereUniqueWithoutConversationInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutConversationInput!
}

input MessageUpdateManyWithWhereWithoutConversationInput {
  where: MessageScalarWhereInput!
  data: MessageUpdateManyMutationInput!
}

input MessageScalarWhereInput {
  AND: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
  id: StringFilter
  conversationId: StringFilter
  role: EnumMessageRoleFilter
  content: StringFilter
}

input MessageUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  role: EnumMessageRoleFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
}

input ConversationUpdateWithWhereUniqueWithoutInterviewInput {
  where: ConversationWhereUniqueInput!
  data: ConversationUpdateWithoutInterviewInput!
}

input ConversationUpdateManyWithWhereWithoutInterviewInput {
  where: ConversationScalarWhereInput!
  data: ConversationUpdateManyMutationInput!
}

input ConversationScalarWhereInput {
  AND: [ConversationScalarWhereInput!]
  OR: [ConversationScalarWhereInput!]
  NOT: [ConversationScalarWhereInput!]
  id: StringFilter
  interviewId: StringFilter
  questionId: StringFilter
}

input ConversationUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
}

input InterviewUpdateWithWhereUniqueWithoutCandidateInput {
  where: InterviewWhereUniqueInput!
  data: InterviewUpdateWithoutCandidateInput!
}

input InterviewUpdateManyWithWhereWithoutCandidateInput {
  where: InterviewScalarWhereInput!
  data: InterviewUpdateManyMutationInput!
}

input UserUpdateWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCompanyInput!
}

input UserUpdateManyWithWhereWithoutCompanyInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyMutationInput!
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  id: StringFilter
  email: StringFilter
  password: StringFilter
  avatarUrl: StringNullableFilter
  companyId: StringNullableFilter
}

input UserUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
}

input ConversationUpdateWithWhereUniqueWithoutQuestionInput {
  where: ConversationWhereUniqueInput!
  data: ConversationUpdateWithoutQuestionInput!
}

input ConversationUpdateManyWithWhereWithoutQuestionInput {
  where: ConversationScalarWhereInput!
  data: ConversationUpdateManyMutationInput!
}

input QuestionUpdateWithWhereUniqueWithoutCompanyInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutCompanyInput!
}

input QuestionUpdateManyWithWhereWithoutCompanyInput {
  where: QuestionScalarWhereInput!
  data: QuestionUpdateManyMutationInput!
}

input QuestionScalarWhereInput {
  AND: [QuestionScalarWhereInput!]
  OR: [QuestionScalarWhereInput!]
  NOT: [QuestionScalarWhereInput!]
  id: StringFilter
  companyId: StringFilter
  title: StringFilter
  goals: StringNullableListFilter
}

input QuestionUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  goals: QuestionUpdategoalsInput
}

input CompanyCreateInput {
  id: String
  name: String!
  description: String!
  avatarUrl: String
  members: UserCreateNestedManyWithoutCompanyInput
  questions: QuestionCreateNestedManyWithoutCompanyInput
  interviews: InterviewCreateNestedManyWithoutCompanyInput
}

input CompanyUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutCompanyNestedInput
  questions: QuestionUpdateManyWithoutCompanyNestedInput
  interviews: InterviewUpdateManyWithoutCompanyNestedInput
}

input QuestionCreateInput {
  id: String
  title: String!
  goals: QuestionCreategoalsInput
  company: CompanyCreateNestedOneWithoutQuestionsInput!
  conversations: ConversationCreateNestedManyWithoutQuestionInput
}

input QuestionUpdateInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  goals: QuestionUpdategoalsInput
  company: CompanyUpdateOneRequiredWithoutQuestionsNestedInput
  conversations: ConversationUpdateManyWithoutQuestionNestedInput
}

input InterviewCreateInput {
  id: String
  candidate: UserCreateNestedOneWithoutInterviewsInput!
  company: CompanyCreateNestedOneWithoutInterviewsInput!
  conversations: ConversationCreateNestedManyWithoutInterviewInput
}

input InterviewUpdateInput {
  id: StringFieldUpdateOperationsInput
  candidate: UserUpdateOneRequiredWithoutInterviewsNestedInput
  company: CompanyUpdateOneRequiredWithoutInterviewsNestedInput
  conversations: ConversationUpdateManyWithoutInterviewNestedInput
}

input ConversationCreateInput {
  id: String
  interview: InterviewCreateNestedOneWithoutConversationsInput!
  question: QuestionCreateNestedOneWithoutConversationsInput!
  messages: MessageCreateNestedManyWithoutConversationInput
}

input ConversationUpdateInput {
  id: StringFieldUpdateOperationsInput
  interview: InterviewUpdateOneRequiredWithoutConversationsNestedInput
  question: QuestionUpdateOneRequiredWithoutConversationsNestedInput
  messages: MessageUpdateManyWithoutConversationNestedInput
}

input MessageCreateInput {
  id: String
  role: MessageRole!
  content: String!
  conversation: ConversationCreateNestedOneWithoutMessagesInput!
}

input ConversationCreateNestedOneWithoutMessagesInput {
  create: ConversationCreateWithoutMessagesInput
  connectOrCreate: ConversationCreateOrConnectWithoutMessagesInput
  connect: ConversationWhereUniqueInput
}

input ConversationCreateWithoutMessagesInput {
  id: String
  interview: InterviewCreateNestedOneWithoutConversationsInput!
  question: QuestionCreateNestedOneWithoutConversationsInput!
}

input ConversationCreateOrConnectWithoutMessagesInput {
  where: ConversationWhereUniqueInput!
  create: ConversationCreateWithoutMessagesInput!
}

input MessageUpdateInput {
  id: StringFieldUpdateOperationsInput
  role: EnumMessageRoleFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  conversation: ConversationUpdateOneRequiredWithoutMessagesNestedInput
}

input ConversationUpdateOneRequiredWithoutMessagesNestedInput {
  create: ConversationCreateWithoutMessagesInput
  connectOrCreate: ConversationCreateOrConnectWithoutMessagesInput
  upsert: ConversationUpsertWithoutMessagesInput
  connect: ConversationWhereUniqueInput
  update: ConversationUpdateWithoutMessagesInput
}

input ConversationUpsertWithoutMessagesInput {
  update: ConversationUpdateWithoutMessagesInput!
  create: ConversationCreateWithoutMessagesInput!
}

input ConversationUpdateWithoutMessagesInput {
  id: StringFieldUpdateOperationsInput
  interview: InterviewUpdateOneRequiredWithoutConversationsNestedInput
  question: QuestionUpdateOneRequiredWithoutConversationsNestedInput
}